// tessellation evaluation shader
// AKA Domain Shader in DirectX
#version 420 core

layout (std140, binding = 1) uniform freqUpdateShared
{
	float time;         //0
	float windAngle;    //4
	vec4 sunDirection;  //16
	vec4 playerPos;     //32
};

layout (quads, equal_spacing, ccw) in;

//uniform mat4 model;           // the model matrix
//uniform mat4 view;            // the view matrix
//uniform mat4 projection;      // the projection matrix
//uniform mat4 mpvMatrix;       	// model projection view Matrix
//uniform mat4 mvMatrix;
//uniform mat4 mpvMatrix2;
uniform mat4 pvMatrix;

// received from Tessellation Control Shader - all texture coordinates for the patch vertices
//in vec2 TextureCoord[];

out vec4 FragPos;
out vec4 Normal;

#define PI 3.1415926535897932384626433832795

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // compute patch surface normal
    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    Normal = normalize( -vec4(cross(vVec.xyz, uVec.xyz), 0) ); // inital normal before tessellation

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;
	
	//----------------------------------------------------------------------
	//Wave Generation
	float waveLength = 100;
	float amplitude = 1;
	float speed = 50;
	
	vec3 worldPos = playerPos.xyz + p.xyz;
	float k = 2 * PI / waveLength;
	float f = k * (worldPos.x - speed * time);
	p.y = amplitude * sin(f);

	//vec3 tangent = normalize(vec3(1, k * amplitude * cos(f), 0));
	//Normal = vec4(-tangent.y, tangent.x, 0,1);

    // ----------------------------------------------------------------------
    // output patch point position in clip space
	FragPos = p;
    gl_Position = pvMatrix * p;
}