// tessellation evaluation shader
// AKA Domain Shader in DirectX
#version 410 core

layout (quads, equal_spacing, ccw) in;

//uniform mat4 model;           // the model matrix
//uniform mat4 view;            // the view matrix
//uniform mat4 projection;      // the projection matrix
//uniform mat4 mpvMatrix;       	// model projection view Matrix
//uniform mat4 mvMatrix;
//uniform mat4 mpvMatrix2;
uniform mat4 pvMatrix;

// received from Tessellation Control Shader - all texture coordinates for the patch vertices
//in vec2 TextureCoord[];

out vec4 pos;


void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // compute patch surface normal
    //vec4 uVec = p01 - p00;
    //vec4 vVec = p10 - p00;
    //vec4 normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) ); // inital normal before tessellation

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;


    // ----------------------------------------------------------------------
    // output patch point position in clip space
	pos = gl_in[0].gl_Position;
    gl_Position = pvMatrix * p;
}