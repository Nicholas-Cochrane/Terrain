//Tessellation Control Shader
// AKA Hull Shader in DirectX
#version 410 core

layout(vertices=4) out;

uniform sampler2D heightMap;  // the texture corresponding to our height map

uniform mat4 mvMatrix;          // model view matrix
uniform mat4 mpvMatrix;         // model projection view Matrix
uniform mat4 mpvMatrix2;        // Alt MPV for testing
uniform mat4 modelMatrix;       // model matrix to move points from movdel space to world space

uniform vec4 camPos;            // Camera coordinates
uniform float heightScale;    	// (number of units (or maximum tiles) / texture size in meters) * maximum height of height map from 0


// varying input from vertex shader
in vec2 TexCoord[];
// varying output to evaluation shader
out vec2 TextureCoord[];


void main()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	TextureCoord[gl_InvocationID] = TexCoord[gl_InvocationID];
			
	if (gl_InvocationID == 0)
    {
		// step 0;
		// retrieve control point coords with height displacement via texture coordinates
		//-------------------------------------------------------------------------------
		vec4 point00 = (gl_in[0].gl_Position + vec4(0.0f, texture(heightMap, TextureCoord[0]).r * heightScale, 0.0f, 0.0f));
		vec4 point01 = (gl_in[1].gl_Position + vec4(0.0f, texture(heightMap, TextureCoord[1]).r * heightScale, 0.0f, 0.0f));
		vec4 point10 = (gl_in[2].gl_Position + vec4(0.0f, texture(heightMap, TextureCoord[2]).r * heightScale, 0.0f, 0.0f));
		vec4 point11 = (gl_in[3].gl_Position + vec4(0.0f, texture(heightMap, TextureCoord[3]).r * heightScale, 0.0f, 0.0f));
			
		// mid point of patch to camera distance
		float avgDist = distance(camPos, modelMatrix * ((point00+point01+point10+point11)/4.0f));
		
		const int MIN_TESS_LEVEL = 1;
		const int MAX_TESS_LEVEL = 64;
		const float MIN_DISTANCE = 64;//20
		const float MAX_DISTANCE = 400;//800
		
		//step 1; transform each vertx to screen space
		//--------------------------------------------
		vec4 screenSpacePos00 = mpvMatrix * point00;
		vec4 screenSpacePos01 = mpvMatrix * point01;
		vec4 screenSpacePos10 = mpvMatrix * point10;
		vec4 screenSpacePos11 = mpvMatrix * point11;
		
		
		//test boundry by checking if patch is above/belows or left/right of view space
		float boundTestX = step(1.0f,abs(screenSpacePos00.x/screenSpacePos00.w)) 
								* step(1.0f,abs(screenSpacePos01.x/screenSpacePos01.w)) 
								* step(1.0f,abs(screenSpacePos10.x/screenSpacePos10.w)) 
								* step(1.0f,abs(screenSpacePos11.x/screenSpacePos11.w));
		float boundTestY = step(1.0f,abs(screenSpacePos00.y/screenSpacePos00.w)) 
								* step(1.0f,abs(screenSpacePos01.y/screenSpacePos01.w)) 
								* step(1.0f,abs(screenSpacePos10.y/screenSpacePos10.w))
								* step(1.0f,abs(screenSpacePos11.y/screenSpacePos11.w));
								
		
		if((boundTestX != 0.0f) || (boundTestY != 0.0f) && avgDist > 64.0f){
			// Set Tessellation levels to 0 to not render patch that is out of bounds 
			// and not close to the camera (Which is the edge case that breaks high preformance bounds testing)
			//-------------------------------------------------------------------------------------------------
			gl_TessLevelOuter[0] = 0;
			gl_TessLevelOuter[1] = 0;
			gl_TessLevelOuter[2] = 0;
			gl_TessLevelOuter[3] = 0;
			
			gl_TessLevelInner[0] = 0;
			gl_TessLevelInner[1] = 0;
		}else{
			// ----------------------------------------------------------------------
			// Step 2: transform each vertex into eye space
			vec4 eyeSpacePos00 = mvMatrix * point00;
			vec4 eyeSpacePos01 = mvMatrix * point01;
			vec4 eyeSpacePos10 = mvMatrix * point10;
			vec4 eyeSpacePos11 = mvMatrix * point11;

			// ----------------------------------------------------------------------
			// Step 3: "distance" from camera scaled between 0 and 1
			float distance00 = clamp((abs(eyeSpacePos00.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
			float distance01 = clamp((abs(eyeSpacePos01.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
			float distance10 = clamp((abs(eyeSpacePos10.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
			float distance11 = clamp((abs(eyeSpacePos11.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);

			// ----------------------------------------------------------------------
			// Step 4: interpolate edge tessellation level based on closer vertex
			float tessLevel0 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance10, distance00) );
			float tessLevel1 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance00, distance01) );
			float tessLevel2 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance01, distance11) );
			float tessLevel3 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance11, distance10) );

			// ----------------------------------------------------------------------
			// Step 5: set the corresponding outer edge tessellation levels
			gl_TessLevelOuter[0] = tessLevel0;
			gl_TessLevelOuter[1] = tessLevel1;
			gl_TessLevelOuter[2] = tessLevel2;
			gl_TessLevelOuter[3] = tessLevel3;

			// ----------------------------------------------------------------------
			// Step 6: set the inner tessellation levels to the max of the two parallel edges
			gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
			gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);
		}
    }
}