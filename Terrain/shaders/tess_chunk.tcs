//Tessellation Control Shader
// AKA Hull Shader in DirectX
#version 410 core

layout(vertices=4) out;

//uniform mat4 model;           // the model matrix
//uniform mat4 view;            // the view matrix
uniform mat4 mvMatrix;          // model view matrix
uniform mat4 mpvMatrix;         // model projection view Matrix
uniform mat4 mpvMatrix2;

// varying input from vertex shader
in vec2 TexCoord[];
// varying output to evaluation shader
out vec2 TextureCoord[];


void main()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	TextureCoord[gl_InvocationID] = TexCoord[gl_InvocationID];
			
	if (gl_InvocationID == 0)
    {
		const int MIN_TESS_LEVEL = 2;
		const int MAX_TESS_LEVEL = 64;
		const float MIN_DISTANCE = 20;//20
		const float MAX_DISTANCE = 400;//800
		
		//step 1; transform each vertx to screen space
		//--------------------------------------------
		vec4 screenSpacePos00 = mpvMatrix * gl_in[0].gl_Position;
		vec4 screenSpacePos01 = mpvMatrix * gl_in[1].gl_Position;
		vec4 screenSpacePos10 = mpvMatrix * gl_in[2].gl_Position;
		vec4 screenSpacePos11 = mpvMatrix * gl_in[3].gl_Position;
		
		
		float boundTest00 = step(1.0f,abs(screenSpacePos00.x/screenSpacePos00.w)) + step(1.0f,abs(screenSpacePos00.y/screenSpacePos00.w));
		float boundTest01 = step(1.0f,abs(screenSpacePos01.x/screenSpacePos01.w)) + step(1.0f,abs(screenSpacePos01.y/screenSpacePos01.w));
		float boundTest10 = step(1.0f,abs(screenSpacePos10.x/screenSpacePos10.w)) + step(1.0f,abs(screenSpacePos10.y/screenSpacePos10.w));
		float boundTest11 = step(1.0f,abs(screenSpacePos11.x/screenSpacePos11.w)) + step(1.0f,abs(screenSpacePos11.y/screenSpacePos11.w));
	
		
		float boundTest = boundTest00*boundTest10*boundTest01*boundTest11;
		
		/*
		// create axis alined rectangle around screenspace patch
		float minX = min(screenSpacePos00.x/screenSpacePos00.w, min(screenSpacePos01.x/screenSpacePos01.w, min(screenSpacePos10.x/screenSpacePos10.w, screenSpacePos11.x/screenSpacePos11.w)));
		float minY = min(screenSpacePos00.y/screenSpacePos00.w, min(screenSpacePos01.y/screenSpacePos01.w, min(screenSpacePos10.y/screenSpacePos10.w, screenSpacePos11.y/screenSpacePos11.w)));
		float maxX = max(screenSpacePos00.x/screenSpacePos00.w, max(screenSpacePos01.x/screenSpacePos01.w, max(screenSpacePos10.x/screenSpacePos10.w, screenSpacePos11.x/screenSpacePos11.w)));
		float maxY = max(screenSpacePos00.y/screenSpacePos00.w, max(screenSpacePos01.y/screenSpacePos01.w, max(screenSpacePos10.y/screenSpacePos10.w, screenSpacePos11.y/screenSpacePos11.w)));
	
		
		bool outBounds = minX > 1.0 || maxX < -1.0 || minY > 1.0 || maxY < -1.0;*/
		bool outBounds = boundTest != 0.0f;
		if(outBounds){
			// Set Tessellation levels to 0 to not render patch that is out of bounds
			gl_TessLevelOuter[0] = 0;
			gl_TessLevelOuter[1] = 0;
			gl_TessLevelOuter[2] = 0;
			gl_TessLevelOuter[3] = 0;
			
			gl_TessLevelInner[0] = 0;
			gl_TessLevelInner[1] = 0;
		}else{
			// ----------------------------------------------------------------------
			// Step 2: transform each vertex into eye space
			vec4 eyeSpacePos00 = mvMatrix * gl_in[0].gl_Position;
			vec4 eyeSpacePos01 = mvMatrix * gl_in[1].gl_Position;
			vec4 eyeSpacePos10 = mvMatrix * gl_in[2].gl_Position;
			vec4 eyeSpacePos11 = mvMatrix * gl_in[3].gl_Position;

			// ----------------------------------------------------------------------
			// Step 3: "distance" from camera scaled between 0 and 1
			float distance00 = clamp((abs(eyeSpacePos00.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
			float distance01 = clamp((abs(eyeSpacePos01.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
			float distance10 = clamp((abs(eyeSpacePos10.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
			float distance11 = clamp((abs(eyeSpacePos11.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);

			// ----------------------------------------------------------------------
			// Step 4: interpolate edge tessellation level based on closer vertex
			float tessLevel0 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance10, distance00) );
			float tessLevel1 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance00, distance01) );
			float tessLevel2 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance01, distance11) );
			float tessLevel3 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance11, distance10) );

			// ----------------------------------------------------------------------
			// Step 5: set the corresponding outer edge tessellation levels
			gl_TessLevelOuter[0] = tessLevel0;
			gl_TessLevelOuter[1] = tessLevel1;
			gl_TessLevelOuter[2] = tessLevel2;
			gl_TessLevelOuter[3] = tessLevel3;

			// ----------------------------------------------------------------------
			// Step 6: set the inner tessellation levels to the max of the two parallel edges
			gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
			gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);
		}
    }
}